<% latest_visit = HealthCenterVisit.first(:order => 'updated_at desc', :limit => 1) %>
<%# cache('autoeval_data:' + (latest_visit ? latest_visit.updated_at.to_s : 'never')) do %>
var olmis_instance = {};
var pickup_instance = {};
<%- province = Province.find_by_code(params[:province]) -%>
<%- delivery_zones = province ? province.delivery_zones.sort : DeliveryZone.all.sort -%>
<%- health_centers = province ? province.health_centers : HealthCenter.all -%>
var data_instance = <%=
{
  :delivery_zones     => delivery_zones.map { |dz| { :code => dz.code, :name => dz.name } },
  :administrative_areas => AdministrativeArea.all.sort.map { |aa| { :code => aa.code, :name => aa.name, :parent_code => aa.parent_code } },
  :health_centers     => health_centers.map { |hc| { :code => hc.code, :name => hc.name, :area_code => hc.administrative_area_code, :delivery_zone => hc.delivery_zone.code, :fridge_codes => Fridge.stock_room(hc.stock_room_id).map(&:code), :ideal_stock => Hash[*hc.ideal_stock_amounts.map{|isa| [ isa.package.code, isa.quantity]}.flatten], :population => hc.catchment_population } },
  :field_coordinators => delivery_zones.map(&:field_coordinator).compact.sort.uniq.map { |fc| { :code => fc.username, :name => fc.name } },
  :warehouse_ideal_stock => delivery_zones.inject({}) { |hash,dz| hash[dz.code] = Hash[*dz.total_ideal_stock_by_package.map { |package,qty| [ package.code, qty ] }.flatten] ; hash },
}.to_json %>;

var valid_forms;
if (!valid_forms)
  valid_forms = {};

<%- unless Rails.env == 'development' -%>
<%- HealthCenter.all.each do |hc| -%>
<%-   if visit = hc.most_recent_visit -%>
<%-     key = "#{ visit.date_period }/#{ hc.code }" -%>
//localStorage['<%= key %>'] = <%#= visit.to_json.to_json %>;
//valid_forms['<%= key %>'] = 'stored';                        
<%-   end -%>
<%- end -%>
<%- end -%>

data_instance.areas_by_area_code = {};
$(data_instance.administrative_areas).each(function(i,e) { data_instance.areas_by_area_code[e.code] = e; });

var AutoevalData = {};
jQuery(document).ready(function() {
AutoevalData = {
  current_date_period:   (new Date()).to_date_period(),
  previous_date_period:  (new Date()).previous_month().to_date_period(),
  excessive_months_since_last_visit: 3,
  excessive_days_between_visits:     34,

  ideal_stock_amounts:  <%= Hash[*HealthCenter.with_ideal_stock.all.map { |hc| [hc.code, hc.ideal_stock_amounts_by_code] }.flatten].to_json %>,
  delivered_inventory:  <%= Hash[*HealthCenter.with_recent_delivery(2).all.map { |hc| [hc.code, hc.package_quantities_by_date] }.flatten].to_json %>,
  existing_inventory:   <%= Hash[*HealthCenter.with_recent_existing(2).all.map { |hc| [hc.code, hc.package_quantities_by_date] }.flatten].to_json %>,

  product_names:        <%= Product.active.trackable.sort.map(&:name).to_json %>,
  trackable_package_codes: <%= Package.active.trackable.sort.map(&:code).to_json %>,
  package_codes:         <%= Package.active.sort.map(&:code).to_json %>,
  products_by_package:  <%= Hash[*Package.active.map { |p| [p.code, p.product.name] }.flatten].to_json %>,

  province_names:       <%= Province.all.sort.map(&:label).to_json %>,
  provinces:            <%= Hash[*District.all.group_by(&:province).map { |p, ds| [p.name, ds.sort.map(&:label)] }.flatten_once].to_json %>,
  districts:            <%= Hash[*HealthCenter.all.group_by(&:district).map { |d, hcs| [d.name, hcs.sort.map(&:code)] }.flatten_once].to_json %>,
  hc_names:             <%= Hash[*HealthCenter.all.map { |hc| [hc.code, hc.label] }.flatten].to_json %>,

  visits:               <%= Hash[*HealthCenter.recent_visits(6).map { |h|
                              [h.code, Hash[*h.health_center_visits.map { |hcv| [hcv.visit_month, hcv.visited_at] }.flatten]]
                            }.reject { |k,v| v.empty? }.flatten_once].to_json %>,
  excusable_non_visits: <%= Hash[*HealthCenter.recent_ok_non_visits(6).map { |h|
                              [h.code, Hash[*h.health_center_visits.map { |hcv| [hcv.visit_month, true] }.flatten]]
                            }.reject { |k,v| v.empty? }.flatten_once].to_json %>,
  excusable_non_visit_reasons: <%= HealthCenterVisit::ExcusableNonVisitReasons.to_json %>
};
});
<%# end %>

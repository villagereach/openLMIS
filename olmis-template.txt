mysql_version = run("mysql_config --version")
if mysql_version.blank?
  puts <<-EOF
OpenLMIS currently only works with MySQL and a MySQL installation cannot
be found, or the MySQL binaries cannot be found in your PATH.

Please install MySQL, or add the MySQL binaries directory to your PATH,
before configuring an OpenLMIS application.
  EOF
  exit
end

appname = File.basename(root)

run "rm public/index.html"
run "rm public/javascripts/*"
run "rm public/images/*"

use_git = yes?("Use git (y/n)?")
use_submodules = use_git && yes?("Install plugins as submodules (y/n)?")

if use_git
  git :init
  run "touch tmp/.gitignore log/.gitignore"
  file ".gitignore", <<-EOF.gsub(/^ +/,'')
    .DS_Store
    log/*.log
    tmp/*
    tmp/**/*
    config/database.yml
    *~
    *.swp
  EOF
  git :add => '.'
  git :commit => "-a -m 'Initial commit'"
end

log '', 'Installing plugins.'
plugin "olmis",
  :git => "git://github.com/villagereach/openLMIS.git",
  :submodule => use_submodules
plugin "referenced-by",
  :git => "git://github.com/joelhoffman/referenced-by.git",
  :submodule => use_submodules
plugin "report",
  :git => "git://github.com/joelhoffman/report.git",
  :submodule => use_submodules
plugin "mig_constraints",
  :git => "git://github.com/joelhoffman/mig_constraints.git",
  :submodule => use_submodules
plugin "smurf",
  :git => "git://github.com/thumblemonks/smurf.git",
  :submodule => use_submodules
plugin "columns_on_demand",
  :git => "git://github.com/willbryant/columns_on_demand.git",
  :submodule => use_submodules
plugin "active_record_defaults",
  :git => "git://github.com/aussiegeek/active_record_defaults.git",
  :submodule => use_submodules
plugin "activerecord_i18n_defaults",
  :git => "git://github.com/dcrec1/activerecord_i18n_defaults.git",
  :submodule => use_submodules
plugin "i18n_label",
  :git => "git://github.com/iain/i18n_label.git",
  :submodule => use_submodules
plugin "ym4r_gm",
  :git => "git://github.com/davec/ym4r_gm.git",
  :submodule => use_submodules

gem "mysql"
gem "fastercsv"
gem "stringex"
gem "ick"
gem "nokogiri", :version => '1.4.1'

# NOTE: gems:install must be done before config.load_path changes, 
# because some, e.g., vendor/olmis/init.rb, requires some of the gems  
log '', 'Required gems will now be installed with the sudo command.'
rake 'gems:install', :sudo => true

# ensure gems are properly installed
gem_list = run("gem list 'mysql|stringex|fastercsv|ick|nokogiri'")
log gem_list 
gem_installed = yes?("Are the 5 gems installed: fastercsv, ick, mysql, nokogiri, stringex (y/n)?")
if not gem_installed 
  log '', 'FATAL ERROR: Required gems not yet insatlled.'
  log '', "You can try sudo rake --trace 'gems:install' on command line."
  log '', 'Install the required gems manually if needed.'
  log '', 'Abort installation...'
  exit 
end 

environment "config.load_paths += ['lib', 'lib/mixins', 'lib/helpers', 'lib/models', 'lib/controllers'].map { |d| Rails.root.join('vendor','plugins', 'olmis', d) }"
environment "config.plugins = [:all, :olmis]"

environment "config.i18n.load_path += Dir[Rails.root.join('vendor','plugins','olmis','locales','*.yml')]"
environment "config.i18n.default_locale = :en"

initializer 'routing.rb', <<ROUTING
ActionController::Routing::RouteSet::Mapper.class_eval do
  # Loads the set of routes from within a plugin and 
  # evaluates them at this point within an applicationâ€™s 
  # main routes.rb file. 
  def from_plugin(name)
    map = self # to make 'map' available within the plugin route file
    plugin_root = File.join(RAILS_ROOT, 'vendor', 'plugins') 
    routes_path = File.join(plugin_root, name.to_s, 'routes.rb') 
    eval(IO.read(routes_path), binding, routes_path) if File.file?(routes_path)
  end
end 
ROUTING

initializer 'ick.rb', 'Ick.sugarize'

gsub_file "config/routes.rb", /^( *)(map.connect.*)/, '\1#\2'
route 'Dir["#{Rails.root}/vendor/plugins/*"].each { |plugin_dir| map.from_plugin File.basename(plugin_dir) }'

db_name = ask("Enter the database name (default is #{appname})")
db_name.strip!
db_name = db_name.blank? ? appname : db_name.sub(/_(development|production|test)$/, '')

db_user = ask("Enter the database username (default is root); it must have permission to create #{db_name}_development if it does not exist")
db_user.strip!
db_user = "root" if db_user.blank?

db_pass = ask("Enter the database password for #{db_user}; hit return if #{db_user} has no password")
db_pass.strip!

gsub_file 'config/database.yml', /^\s*(adapter|database|encoding|username|password):[^\n]*\n/mi, ''

pw = db_pass.blank? ? "" : "\n  password: #{db_pass}"

gsub_file 'config/database.yml', /^(development|test|production):/mi do |match|
  name = match.split(':',2).first
  "#{match}\n  adapter: mysql\n  encoding: utf8\n  database: #{db_name}_#{name}\n  username: #{db_user}#{pw}"
end

run 'cp vendor/plugins/ym4r_gm/gmaps_api_key.yml.sample config/gmaps_api_key.yml'

rake 'db:create'


# minimal config in order to generate olmis_migrations 
run 'cp vendor/plugins/olmis/sample/olmis_minimal.rb config/olmis.rb'
generate 'olmis_migrations'
if 0 != $?.to_i
  log '', "FATAL: generate olmis_migrations failed. exit code: #{$?.to_i}"
  log '', 'Abort installation...'
  exit 
end 


rake 'db:migrate'
if 0 != $?.to_i
  log '', "FATAL ERROR rake 'db:migrate' done. exit code: #{$?.to_i}"
  log '', 'Abort installation...'
  exit
end 

# install a root user as the absoulate bare minimal
# (in case the user does not want to apply sample Pacific NW config)
rake 'olmis:db:bootstrap 

if use_git
  git :add => '.'
  git :commit => "-a -m 'Initial OLMIS configuration'"
end

rake 'olmis:assets:init'

if use_git
  git :add => '.'
  git :commit => "-a -m 'Adding OLMIS assets'"
end

if yes?('Apply sample Pacific NW OLMIS configuration (y/n)?')
  run 'cp vendor/plugins/olmis/sample/olmis.rb config/'
  run 'cp vendor/plugins/olmis/sample/en.yml config/locales/'

  generate 'olmis_areas'
  generate 'olmis_tallies'

  if use_git
    git :add => '.'
    git :commit => "-a -m 'Adding OLMIS region and tally models'"
  end

  rake 'db:migrate'
  rake 'olmis:db:bootstrap'
  
  log '', 'Next steps:'
else
  log '', 'Next steps:'
  log '', '* Create an OLMIS configuration file in config/olmis.rb'
  log '', '  using vendor/plugins/olmis/sample/olmis.rb as an example.'
  log '', '* Create an OLMIS translation file in config/locales'
  log '', '  using vendor/plugins/olmis/sample/en.yml as an example.'
  log '', '* Run script/generate olmis_areas'
  log '', '  and script/generate olmis_tallies'
  log '', '* Run rake db:migrate to create tables for your configured EPI tallies'
  log '', '* Run rake olmis:db:bootstrap to populate the database with an initial'
  log '', '  system and create the "admin" user'
end

log '', '* Start the Rails server and login as "admin" with password "olmis".'
log '', '* Create field coordinator users and assign them to delivery zones.'
log '', '* Edit config/gmaps_api_key.yml with your Google Maps API key(s),'
log '', '  before deploying to production. (The default keys are valid for'
log '', '  a development environment on localhost.)'
